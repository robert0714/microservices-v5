// Generated by delombok at Mon Apr 02 14:55:01 CST 2018
package microservices.book.gamification.client.dto;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import microservices.book.gamification.client.MultiplicationResultAttemptDeserializer;

/**
 * Identifies the attempt from a user to solve a multiplication.
 */
@JsonDeserialize(using = MultiplicationResultAttemptDeserializer.class)
public final class MultiplicationResultAttempt {
    private final String userAlias;
    private final int multiplicationFactorA;
    private final int multiplicationFactorB;
    private final int resultAttempt;
    private final boolean correct;

    // Empty constructor for JSON/JPA
    MultiplicationResultAttempt() {
        userAlias = null;
        multiplicationFactorA = -1;
        multiplicationFactorB = -1;
        resultAttempt = -1;
        correct = false;
    }

    @java.lang.SuppressWarnings("all")
    public MultiplicationResultAttempt(final String userAlias, final int multiplicationFactorA, final int multiplicationFactorB, final int resultAttempt, final boolean correct) {
        this.userAlias = userAlias;
        this.multiplicationFactorA = multiplicationFactorA;
        this.multiplicationFactorB = multiplicationFactorB;
        this.resultAttempt = resultAttempt;
        this.correct = correct;
    }

    @java.lang.SuppressWarnings("all")
    public String getUserAlias() {
        return this.userAlias;
    }

    @java.lang.SuppressWarnings("all")
    public int getMultiplicationFactorA() {
        return this.multiplicationFactorA;
    }

    @java.lang.SuppressWarnings("all")
    public int getMultiplicationFactorB() {
        return this.multiplicationFactorB;
    }

    @java.lang.SuppressWarnings("all")
    public int getResultAttempt() {
        return this.resultAttempt;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isCorrect() {
        return this.correct;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "MultiplicationResultAttempt(userAlias=" + this.getUserAlias() + ", multiplicationFactorA=" + this.getMultiplicationFactorA() + ", multiplicationFactorB=" + this.getMultiplicationFactorB() + ", resultAttempt=" + this.getResultAttempt() + ", correct=" + this.isCorrect() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof MultiplicationResultAttempt)) return false;
        final MultiplicationResultAttempt other = (MultiplicationResultAttempt) o;
        final java.lang.Object this$userAlias = this.getUserAlias();
        final java.lang.Object other$userAlias = other.getUserAlias();
        if (this$userAlias == null ? other$userAlias != null : !this$userAlias.equals(other$userAlias)) return false;
        if (this.getMultiplicationFactorA() != other.getMultiplicationFactorA()) return false;
        if (this.getMultiplicationFactorB() != other.getMultiplicationFactorB()) return false;
        if (this.getResultAttempt() != other.getResultAttempt()) return false;
        if (this.isCorrect() != other.isCorrect()) return false;
        return true;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $userAlias = this.getUserAlias();
        result = result * PRIME + ($userAlias == null ? 43 : $userAlias.hashCode());
        result = result * PRIME + this.getMultiplicationFactorA();
        result = result * PRIME + this.getMultiplicationFactorB();
        result = result * PRIME + this.getResultAttempt();
        result = result * PRIME + (this.isCorrect() ? 79 : 97);
        return result;
    }
}
